# Copyright (c) 2022 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Run Matter Linux examples on Arm Virtual Hardware

# Requires avh-build-linux-arm.yml workflow to have been run

# Example workflow using Arm Virtual Hardware (AVH) targets for testing
# See https://avh.arm.com for more info
# 
# Raspberry Pi 4, or i.MX8M+ selected by MODEL environment variable
# 
# You will need an Arm Virtual Hardware login to run successfully
# To generate API_TOKEN, go to Profile > API > Generate in AVH browser window.
# Recommended to specify as API_TOKEN secret
#
# See also scripts/avh directory

on:
    # push:
    # pull_request:
    workflow_dispatch:

concurrency:
    group: ${{ github.ref }}-${{ github.workflow }}-${{ (github.event_name == 'pull_request' && github.event.number) || (github.event_name == 'workflow_dispatch' && github.run_number) || github.sha }}
    cancel-in-progress: true
    

jobs:
    virtual-device-test:
        runs-on: ubuntu-latest
# MODEL should be one of rpi4b or imx8mp-evk
#        env:
#          MODEL: ${{ secrets.MODEL }} 
#          INSTANCE1: ${{ secrets.INSTANCE1 }} 
#          INSTANCE2: ${{ secrets.INSTANCE2 }}
#          ENDPOINT: ${{ secrets.ENDPOINT }}
#          API_TOKEN: ${{ secrets.API_TOKEN }} 
        env:
          # MODEL: imx8mp-evk
          MODEL: rpi4b
          INSTANCE1: chip-tool
          INSTANCE2: chip-lighting-app
          ENDPOINT: https://app.avh.arm.com/api   
          API_TOKEN: ${{ secrets.API_TOKEN }}   
        steps:
          - name: pull tests
            uses: actions/checkout@v2

          - name: Download artifact ${{ env.INSTANCE1 }}
#            uses: actions/download-artifact@v3
            uses: dawidd6/action-download-artifact@v2
            with:
              workflow: avh-build-linux-arm.yml
              name: ${{ env.INSTANCE1 }}
              path: ${{ github.workspace }}

          - name: Download artifact ${{ env.INSTANCE2 }}
#            uses: actions/download-artifact@v3
            uses: dawidd6/action-download-artifact@v2
            with:
              workflow: avh-build-linux-arm.yml
              name: ${{ env.INSTANCE2 }}
              path: ${{ github.workspace }}                                      

          - name: Get OpenVPN websockets and other dependencies
            run: |
                sudo apt-get -y update
                sudo apt -y install openvpn sshpass curl jq
                pip install websockets asyncio

          - name: pull latest avhcli utility
            run: |
              echo need to update repo link when available
              echo for now use copy in scripts/avh folder
              mkdir avhcli
              cp scripts/avh/avhcli.sh avhcli/avhcli.sh
              chmod 777 avhcli/avhcli.sh
              
          - name: Create INSTANCE2 [${{ env.INSTANCE2 }}] instance on AVH
            run: |             
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE2 -m $MODEL create
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE2 -m $MODEL start

          - name: Create INSTANCE1 [${{ env.INSTANCE1 }}] instance on AVH
            run: |
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL create
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL start

          - name: connect to AVH OpenVPN
            run: |
              sudo openvpn --config avhcli/avh.ovpn --daemon 
              echo Connecting and ping-ing instances...
              while ! ping -c 1 $(cat "./avhcli/${{ env.INSTANCE2 }}_lan_ip.txt"); do
                echo .
                sleep 1
              done
              while ! ping -c 1 $(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt"); do
                echo .
                sleep 1
              done
              echo Connected

          - name: scp binaries to RPi4 instances ${{ env.INSTANCE1 }} and ${{ env.INSTANCE2 }}
            if: ${{ env.MODEL == 'rpi4b' }}
            run: |
              sshpass -p raspberry scp -o StrictHostKeyChecking=no ${{ env.INSTANCE1 }} pi@$(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt"):~/
              sshpass -p raspberry ssh -o StrictHostKeyChecking=no pi@$(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt") chmod 755 ${{ env.INSTANCE1 }}
              sshpass -p raspberry scp -o StrictHostKeyChecking=no ${{ env.INSTANCE2 }} pi@$(cat "./avhcli/${{ env.INSTANCE2 }}_lan_ip.txt"):~/
              sshpass -p raspberry ssh -o StrictHostKeyChecking=no pi@$(cat "./avhcli/${{ env.INSTANCE2 }}_lan_ip.txt") chmod 755 ${{ env.INSTANCE2 }}

          - name: scp binaries to i.MX8M+ instances ${{ env.INSTANCE1 }} and ${{ env.INSTANCE2 }}
            if: ${{ env.MODEL == 'imx8mp-evk' }}
            run: |
              sshpass scp -o StrictHostKeyChecking=no ${{ env.INSTANCE1 }} root@$(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt"):~/
              sshpass ssh -o StrictHostKeyChecking=no root@$(cat "./avhcli/${{ env.INSTANCE1 }}_lan_ip.txt") chmod 755 ${{ env.INSTANCE1 }}
              sshpass scp -o StrictHostKeyChecking=no ${{ env.INSTANCE2 }} root@$(cat "./avhcli/${{ env.INSTANCE2 }}_lan_ip.txt"):~/
              sshpass ssh -o StrictHostKeyChecking=no root@$(cat "./avhcli/${{ env.INSTANCE2 }}_lan_ip.txt") chmod 755 ${{ env.INSTANCE2 }}             
              
          - name: chmod 755 python scripts
            run: |
              chmod 755 scripts/avh/ws.py
              chmod 755 scripts/avh/web_socket_light_test.py
              chmod 755 scripts/avh/web_socket_chip_tool_test.py

          - name: Test ${{ env.INSTANCE1 }} and ${{ env.INSTANCE2 }} with WebSocket to console
            run: |
              
              echo Starting lighting app
              ./scripts/avh/web_socket_light_test.py $(cat "./avhcli/${{ env.INSTANCE2 }}_console.txt")
              echo invoke chip-tool commands
              ./scripts/avh/web_socket_chip_tool_test.py $(cat "./avhcli/${{ env.INSTANCE1 }}_console.txt")
              echo Kill lighting-app
              ./scripts/avh/ws.py $(cat "./avhcli/${{ env.INSTANCE2 }}_console.txt") '\x03'
              sleep 3

          - name: Stopping/Deleting ${{ env.INSTANCE1 }} and ${{ env.INSTANCE2 }} 
            run: | 
              sudo killall openvpn
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL delete
              avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE2 -m $MODEL delete
              # avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE1 -m $MODEL stop
              # avhcli/avhcli.sh -t $API_TOKEN -n $INSTANCE2 -m $MODEL stop
